// Code generated by protoc-gen-go. DO NOT EDIT.
// source: auth.proto

package example

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type RequestType int32

const (
	RequestType__NONE RequestType = 0
	RequestType_TYPE1 RequestType = 1
	// request type 2
	RequestType_TYPE2 RequestType = 2
)

var RequestType_name = map[int32]string{
	0: "_NONE",
	1: "TYPE1",
	2: "TYPE2",
}

var RequestType_value = map[string]int32{
	"_NONE": 0,
	"TYPE1": 1,
	"TYPE2": 2,
}

func (x RequestType) Enum() *RequestType {
	p := new(RequestType)
	*p = x
	return p
}

func (x RequestType) String() string {
	return proto.EnumName(RequestType_name, int32(x))
}

func (x *RequestType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(RequestType_value, data, "RequestType")
	if err != nil {
		return err
	}
	*x = RequestType(value)
	return nil
}

func (RequestType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{0}
}

//
//
// Message Request type
//
type Request struct {
	//
	// leading comment
	// 2rd comment line
	//
	Id                   *int32                 `protobuf:"varint,1,req,name=id" json:"id,omitempty"`
	Name                 *string                `protobuf:"bytes,2,opt,name=name,def=abc" json:"name,omitempty"`
	Type                 *RequestType           `protobuf:"varint,3,opt,name=type,enum=example.RequestType" json:"type,omitempty"`
	Array                []string               `protobuf:"bytes,4,rep,name=array" json:"array,omitempty"`
	Map                  map[string]RequestType `protobuf:"bytes,5,rep,name=map" json:"map,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value,enum=example.RequestType"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{0}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

const Default_Request_Name string = "abc"

func (m *Request) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func (m *Request) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return Default_Request_Name
}

func (m *Request) GetType() RequestType {
	if m != nil && m.Type != nil {
		return *m.Type
	}
	return RequestType__NONE
}

func (m *Request) GetArray() []string {
	if m != nil {
		return m.Array
	}
	return nil
}

func (m *Request) GetMap() map[string]RequestType {
	if m != nil {
		return m.Map
	}
	return nil
}

type Response struct {
	Embed *Response_Embed `protobuf:"bytes,1,opt,name=embed" json:"embed,omitempty"`
	// Types that are valid to be assigned to TestOneof:
	//	*Response_Name0
	//	*Response_Name1
	//	*Response_Name2
	TestOneof            isResponse_TestOneof `protobuf_oneof:"test_oneof"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{1}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetEmbed() *Response_Embed {
	if m != nil {
		return m.Embed
	}
	return nil
}

type isResponse_TestOneof interface {
	isResponse_TestOneof()
}

type Response_Name0 struct {
	Name0 string `protobuf:"bytes,2,opt,name=name0,oneof"`
}

type Response_Name1 struct {
	Name1 string `protobuf:"bytes,3,opt,name=name1,oneof"`
}

type Response_Name2 struct {
	Name2 string `protobuf:"bytes,4,opt,name=name2,oneof"`
}

func (*Response_Name0) isResponse_TestOneof() {}

func (*Response_Name1) isResponse_TestOneof() {}

func (*Response_Name2) isResponse_TestOneof() {}

func (m *Response) GetTestOneof() isResponse_TestOneof {
	if m != nil {
		return m.TestOneof
	}
	return nil
}

func (m *Response) GetName0() string {
	if x, ok := m.GetTestOneof().(*Response_Name0); ok {
		return x.Name0
	}
	return ""
}

func (m *Response) GetName1() string {
	if x, ok := m.GetTestOneof().(*Response_Name1); ok {
		return x.Name1
	}
	return ""
}

func (m *Response) GetName2() string {
	if x, ok := m.GetTestOneof().(*Response_Name2); ok {
		return x.Name2
	}
	return ""
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Response) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Response_Name0)(nil),
		(*Response_Name1)(nil),
		(*Response_Name2)(nil),
	}
}

type Response_Embed struct {
	Id                   *int32   `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response_Embed) Reset()         { *m = Response_Embed{} }
func (m *Response_Embed) String() string { return proto.CompactTextString(m) }
func (*Response_Embed) ProtoMessage()    {}
func (*Response_Embed) Descriptor() ([]byte, []int) {
	return fileDescriptor_8bbd6f3875b0e874, []int{1, 0}
}

func (m *Response_Embed) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response_Embed.Unmarshal(m, b)
}
func (m *Response_Embed) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response_Embed.Marshal(b, m, deterministic)
}
func (m *Response_Embed) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response_Embed.Merge(m, src)
}
func (m *Response_Embed) XXX_Size() int {
	return xxx_messageInfo_Response_Embed.Size(m)
}
func (m *Response_Embed) XXX_DiscardUnknown() {
	xxx_messageInfo_Response_Embed.DiscardUnknown(m)
}

var xxx_messageInfo_Response_Embed proto.InternalMessageInfo

func (m *Response_Embed) GetId() int32 {
	if m != nil && m.Id != nil {
		return *m.Id
	}
	return 0
}

func init() {
	proto.RegisterEnum("example.RequestType", RequestType_name, RequestType_value)
	proto.RegisterType((*Request)(nil), "example.Request")
	proto.RegisterMapType((map[string]RequestType)(nil), "example.Request.MapEntry")
	proto.RegisterType((*Response)(nil), "example.Response")
	proto.RegisterType((*Response_Embed)(nil), "example.Response.Embed")
}

func init() {
	proto.RegisterFile("auth.proto", fileDescriptor_8bbd6f3875b0e874)
}

var fileDescriptor_8bbd6f3875b0e874 = []byte{
	// 473 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x92, 0x41, 0x8b, 0xd3, 0x4e,
	0x18, 0xc6, 0x3b, 0x49, 0xb3, 0x6d, 0xdf, 0xfe, 0xff, 0x4b, 0x1c, 0x16, 0x1b, 0x83, 0xb0, 0xa1,
	0xa7, 0x50, 0x31, 0xb1, 0x01, 0x45, 0x7a, 0x14, 0x02, 0x1e, 0xdc, 0x55, 0x86, 0x5e, 0xbc, 0x6c,
	0x99, 0x6e, 0x5f, 0x77, 0x83, 0x4d, 0x66, 0x4c, 0xa6, 0x8b, 0xb9, 0xfa, 0x15, 0xbc, 0x15, 0x3f,
	0x80, 0x07, 0x3f, 0x88, 0x77, 0x6f, 0x9e, 0x05, 0x4f, 0x7e, 0x07, 0x99, 0x4c, 0xb3, 0x94, 0x55,
	0x41, 0x4f, 0x79, 0xe7, 0x99, 0xdf, 0x3c, 0x3c, 0xef, 0x43, 0x00, 0xf8, 0x46, 0x5d, 0x46, 0xb2,
	0x14, 0x4a, 0xd0, 0x1e, 0xbe, 0xe5, 0xb9, 0x5c, 0xa3, 0x7f, 0xcc, 0xa5, 0x14, 0x42, 0x2d, 0x63,
	0x89, 0x65, 0x9e, 0x55, 0x55, 0x26, 0x8a, 0x38, 0x47, 0x75, 0x29, 0x56, 0x86, 0xf4, 0x83, 0xdf,
	0x00, 0x15, 0x96, 0x57, 0xd9, 0x39, 0xee, 0x88, 0xbb, 0x17, 0x42, 0x5c, 0xac, 0x31, 0xe6, 0x32,
	0x8b, 0x79, 0x51, 0x08, 0xc5, 0x55, 0x26, 0x8a, 0xca, 0xdc, 0x8e, 0x7f, 0x10, 0xe8, 0x31, 0x7c,
	0xb3, 0xc1, 0x4a, 0xd1, 0x43, 0xb0, 0xb2, 0x95, 0x47, 0x02, 0x2b, 0x74, 0x98, 0x95, 0xad, 0xe8,
	0x08, 0xba, 0x05, 0xcf, 0xd1, 0xb3, 0x02, 0x12, 0x0e, 0x66, 0x36, 0x5f, 0x9e, 0xb3, 0x46, 0xa0,
	0x21, 0x74, 0x55, 0x2d, 0xd1, 0xb3, 0x03, 0x12, 0x1e, 0x26, 0x47, 0xd1, 0x2e, 0x6d, 0xb4, 0x33,
	0x9a, 0xd7, 0x12, 0x59, 0x43, 0xd0, 0x23, 0x70, 0x78, 0x59, 0xf2, 0xda, 0xeb, 0x06, 0x76, 0x38,
	0x60, 0xe6, 0x40, 0xef, 0x81, 0x9d, 0x73, 0xe9, 0x39, 0x81, 0x1d, 0x0e, 0x93, 0x3b, 0x37, 0x9f,
	0x47, 0x27, 0x5c, 0xa6, 0x85, 0x2a, 0x6b, 0xa6, 0x29, 0xff, 0x19, 0xf4, 0x5b, 0x81, 0xba, 0x60,
	0xbf, 0xc6, 0xda, 0x23, 0x3a, 0x10, 0xd3, 0x23, 0x9d, 0x80, 0x73, 0xc5, 0xd7, 0x1b, 0x13, 0xf2,
	0x4f, 0x59, 0x0c, 0x32, 0xb3, 0x1e, 0x93, 0xf1, 0x47, 0x02, 0x7d, 0x86, 0x95, 0x14, 0x45, 0x85,
	0xf4, 0x3e, 0x38, 0x98, 0x2f, 0x71, 0xd5, 0x18, 0x0e, 0x93, 0xd1, 0xde, 0x63, 0x43, 0x44, 0xa9,
	0xbe, 0x66, 0x86, 0xa2, 0xb7, 0xc1, 0xd1, 0xeb, 0x3f, 0x30, 0x85, 0x3c, 0xed, 0x30, 0x73, 0x6c,
	0xf5, 0x69, 0xd3, 0xc7, 0xb5, 0x3e, 0x6d, 0xf5, 0xc4, 0xeb, 0xee, 0xeb, 0x89, 0x3f, 0x02, 0xa7,
	0xf1, 0xbd, 0x2e, 0x9c, 0x98, 0xc2, 0x9f, 0xfc, 0x07, 0xa0, 0xb0, 0x52, 0x0b, 0x51, 0xa0, 0x78,
	0x35, 0x89, 0x60, 0xb8, 0xb7, 0x04, 0x1d, 0x80, 0xb3, 0x38, 0x7d, 0x7e, 0x9a, 0xba, 0x1d, 0x3d,
	0xce, 0x5f, 0xbe, 0x48, 0xa7, 0x2e, 0x69, 0xc7, 0xc4, 0xb5, 0x92, 0x14, 0xda, 0xdf, 0x86, 0x3e,
	0x04, 0x47, 0x1b, 0x4d, 0xa9, 0x7b, 0xb3, 0x0f, 0xff, 0xd6, 0x2f, 0x4b, 0x8e, 0x7b, 0x5f, 0x3f,
	0x10, 0xbb, 0xff, 0x99, 0xf8, 0xf6, 0xf6, 0xac, 0x93, 0x6c, 0x09, 0x0c, 0x52, 0x83, 0x2c, 0x96,
	0xf4, 0xc4, 0x38, 0x25, 0x7f, 0xe7, 0x74, 0xdc, 0x38, 0x7d, 0xb2, 0xde, 0x7d, 0xf9, 0xf6, 0xde,
	0xa2, 0xe3, 0xff, 0xe3, 0x1d, 0x11, 0x6b, 0x8f, 0x19, 0x99, 0xd0, 0x47, 0x70, 0x30, 0xd7, 0x1b,
	0xf2, 0x7f, 0x49, 0xf6, 0xbd, 0xe7, 0x1f, 0x6c, 0xcf, 0xf4, 0xf7, 0x67, 0x00, 0x00, 0x00, 0xff,
	0xff, 0xde, 0x6e, 0x2c, 0xb6, 0x25, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ExampleClient is the client API for Example service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExampleClient interface {
	// test1 comment
	Test1(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type exampleClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleClient(cc grpc.ClientConnInterface) ExampleClient {
	return &exampleClient{cc}
}

func (c *exampleClient) Test1(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/example.example/test1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleServer is the server API for Example service.
type ExampleServer interface {
	// test1 comment
	Test1(context.Context, *Request) (*Response, error)
}

// UnimplementedExampleServer can be embedded to have forward compatible implementations.
type UnimplementedExampleServer struct {
}

func (*UnimplementedExampleServer) Test1(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test1 not implemented")
}

func RegisterExampleServer(s *grpc.Server, srv ExampleServer) {
	s.RegisterService(&_Example_serviceDesc, srv)
}

func _Example_Test1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleServer).Test1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.example/Test1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleServer).Test1(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _Example_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.example",
	HandlerType: (*ExampleServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "test1",
			Handler:    _Example_Test1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}

// ExampleBClient is the client API for ExampleB service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ExampleBClient interface {
	// test2 comment
	Test2(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// test3 interface
	TestA(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
}

type exampleBClient struct {
	cc grpc.ClientConnInterface
}

func NewExampleBClient(cc grpc.ClientConnInterface) ExampleBClient {
	return &exampleBClient{cc}
}

func (c *exampleBClient) Test2(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/example.Example_b/test2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *exampleBClient) TestA(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/example.Example_b/Test_a", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ExampleBServer is the server API for ExampleB service.
type ExampleBServer interface {
	// test2 comment
	Test2(context.Context, *Request) (*Response, error)
	// test3 interface
	TestA(context.Context, *Request) (*Response, error)
}

// UnimplementedExampleBServer can be embedded to have forward compatible implementations.
type UnimplementedExampleBServer struct {
}

func (*UnimplementedExampleBServer) Test2(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Test2 not implemented")
}
func (*UnimplementedExampleBServer) TestA(ctx context.Context, req *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TestA not implemented")
}

func RegisterExampleBServer(s *grpc.Server, srv ExampleBServer) {
	s.RegisterService(&_ExampleB_serviceDesc, srv)
}

func _ExampleB_Test2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleBServer).Test2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Example_b/Test2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleBServer).Test2(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _ExampleB_TestA_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ExampleBServer).TestA(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/example.Example_b/TestA",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ExampleBServer).TestA(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

var _ExampleB_serviceDesc = grpc.ServiceDesc{
	ServiceName: "example.Example_b",
	HandlerType: (*ExampleBServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "test2",
			Handler:    _ExampleB_Test2_Handler,
		},
		{
			MethodName: "Test_a",
			Handler:    _ExampleB_TestA_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "auth.proto",
}
