package markdown

const fileTpl = `
# {{ .InputPath }} API Document

*Document generated by protoc-gen-markdown. DO NOT EDIT!*

> APIs

{{ range $svc := .Services }}
* [{{ $svc.Name.UpperCamelCase }}](#{{ anchor $svc.Name }}) - {{ tocComment $svc.SourceCodeInfo }}
{{ range $method := $svc.Methods }}
{{ $url := (gatewayUrl $method) }}
	* [{{ $method.Name.UpperCamelCase }}{{ if $url }} ({{ $url }}){{ end }}](#{{ anchor $method.Name }}) - {{ tocComment $method.SourceCodeInfo }}
{{ end }}
{{ end }}

{{ range .Services }}
{{ template "service" . }}
{{ end }}

********

## *Embed Messages*

{{ range $type, $m := (embedMessages .) }}
{{ if (eq $type "enum") }}

{{ range $name, $t := $m }}
<h3 id="{{ anchor $t.Name }}">{{ $t.Name.UpperCamelCase }}</h3>

> {{ leadingComment $t.SourceCodeInfo }}

* Enum

|Name (string)|Value (integer)|Comment|
|---|---|---|
{{ range $v := $t.Values }}|{{ $v.Name }}|{{ $v.Value }}|{{ $v.Comment }}|
{{ end }}
{{ end }}

{{ else }}

{{ range $name, $t := $m }}
<h3 id="{{ anchor $t.Name }}">{{ $t.Name.UpperCamelCase }}</h3>

> {{ leadingComment $t.SourceCodeInfo }}

* Fields

|Field|proto type|JSON type|Comment|Default|Required|
|---|---|---|---|---|---|
{{ range $v := $t.Fields }}|{{ $v.Name }}|{{ $v.ProtoType }}|{{ $v.JsonType }}|{{ $v.Comment }}|{{ $v.Default }}|{{ $v.Required }}|
{{ end }}
{{ end }}

{{ end }}
{{ end }}
`
